<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.biz.product.persistence.ProductDao">

  <select id="proTotalCount" resultType="Long">
  	SELECT COUNT(*) FROM tbl_product
  	<where>
  		<!-- 
  		collection에 Dao에서 param으로 설정한 변수를 넣어줌
  		forEach: 반복문
  		==> List로 선언한 p_names를 값으로 넘겨서 p_name에 담고 이 문장을 where절로 만들어라 -> 동적쿼리
  		WHERE p_name LIKE '%' || '킨' || '%' OR p_name LIKE '%' ||  
  		위와 같은 sql문이 출력됨
  		한개의 칼럼에 대한 다중 조건문이 완성됨
  		 -->
  		<foreach collection="p_names" item="p_name" separator="OR">
  			p_name LIKE '%' || #{p_name,jdbcType=VARCHAR} || '%'
  		</foreach>
  	</where>
  </select>
  
  <select id="selectPagination" resultMap="proAndFiles">
  	
	  	SELECT * FROM
			(
	    	SELECT /*+ FIRST_ROWS_100 */ROWNUM AS NUM, IP.*FROM
	    	(
	        	SELECT /*+ INDEX_DESC(P) */ * FROM tbl_product P
	        	<where>
	        		<foreach collection="p_names" item="p_name" separator="OR">
	        			p_name LIKE '%' || #{p_name,jdbcType=VARCHAR} || '%'			
	        		</foreach>
	        	</where>
	    	) IP
	    	WHERE ROWNUM &lt;= #{pageDTO.limit}
			) TBL
		WHERE NUM &gt;= #{pageDTO.offset}
  </select>
  
  <select id="findByPNameListAndPagination" resultMap="proAndFiles">
  	
	  	SELECT * FROM
			(
	    	SELECT /*+ FIRST_ROWS_100 */ROWNUM AS NUM, IP.*FROM
	    	(
	        	SELECT /*+ INDEX_DESC(P) */ * FROM tbl_product P
	    	) IP
	    	WHERE ROWNUM &lt;= #{pageDTO.limit}
			) TBL
		WHERE NUM &gt;= #{pageDTO.offset}
  </select>
  
  <select id="selectAll" resultMap="proAndFiles">
    select * from tbl_product ORDER BY p_code DESC
  </select>

  <resultMap type="productDTO" id="proAndFiles">
  	<id column="p_code" property="p_code"/>
	<result column="p_name" property="p_name"/>
	<result column="p_iprice" property="p_iprice"/>
	<result column="p_oprice" property="p_oprice"/>
	<result column="p_vat" property="p_vat"/>
	<result column="p_file" property="p_file"/>
  	
  	
	<collection property="p_files"
				column="p_code"
				ofType="proFileDTO"
				select="findByPCodeFiles"/>
  </resultMap>
  <select id="findByPCode" resultMap="proAndFiles">
    select * from tbl_product WHERE p_code = #{p_code}
  </select>
  
  <select id="findByPCodeFiles" resultType="proFileDTO">
  	SELECT * FROM tbl_files 
  	WHERE file_p_code = #{p_code}
  </select>
  

  <select id="findByPNames" resultType="productDTO">
    select * from tbl_product 
    WHERE p_name LIKE  '%' ||  #{p_name} || '%'
  </select>
  
  <!-- 
  resultType이 기본형(int, float, String...)일경우는
  별도로 명시하지 않아도 문제가 없었는데
  현재 3.5에서 문제가 발생하므로 resultType을 명시해주자
   -->
  <select id="getMaxPcode" resultType="String">
  	SELECT MAX(p_code) FROM tbl_product
  </select>
  
  <insert id="insert" parameterType="productDTO">
	INSERT INTO tbl_product(
	  	P_CODE,
		P_NAME,
		P_IPRICE,
		P_OPRICE,
		P_VAT,
		P_FILE
	)VALUES(
		#{p_code,jdbcType=VARCHAR},
		#{p_name,jdbcType=VARCHAR},
		#{p_iprice,jdbcType=VARCHAR},
		#{p_oprice,jdbcType=VARCHAR},
		#{p_vat,jdbcType=VARCHAR},
		#{p_file,jdbcType=VARCHAR})
	  
  </insert>
  
  <!--  
  현재 3.5에선S parameterType를 사용하지 않아도 데이터를 잘 가져온다
  하지만 호환성을 위해 사용해주자
   -->
  <update id="update" parameterType="productDTO">
  	UPDATE tbl_product SET
  		
		P_NAME = #{p_name,jdbcType=VARCHAR},
		P_IPRICE = #{p_iprice,jdbcType=VARCHAR},
		P_OPRICE = #{p_oprice,jdbcType=VARCHAR},
		P_VAT = #{p_vat,jdbcType=VARCHAR},
		P_FILE = #{p_file,jdbcType=VARCHAR}
		
	WHERE P_CODE = #{p_code,jdbcType=VARCHAR} 
	  
  </update>

</mapper>